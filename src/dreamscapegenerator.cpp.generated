#include "plugin.hpp"
#include <random>

// THIS PLUGIN WAS GENERATED BY AN AI BRO openai

const int DREAMSCAPE_PARAM = 0;
const int DREAMSCAPE_INPUT = 0;
const int DREAMSCAPE_OUTPUT = 0;
const int DREAMSCAPE_LIGHT = 0;

struct DreamscapeGenerator : Module {
    std::mt19937 randomGenerator;

    DreamscapeGenerator() {
        config(1, 1, 1, 1);
        configParam(DREAMSCAPE_PARAM, 0.0f, 1.0f, 0.0f, "Dreamscape Intensity");
        configInput(DREAMSCAPE_INPUT, "Trigger Input");
        configOutput(DREAMSCAPE_OUTPUT, "Dreamscape Output");
        configLight(DREAMSCAPE_LIGHT, "Dream State Indicator");
    }

    void process(const ProcessArgs& args) override {
        if (inputs[DREAMSCAPE_INPUT].getVoltage() >= 1.0f) {
            // Generate a random dreamscape intensity based on the value of the DREAMSCAPE_PARAM parameter
            std::uniform_real_distribution<float> dreamscapeDist(0.0f, params[DREAMSCAPE_PARAM].getValue());
            float dreamscapeIntensity = dreamscapeDist(randomGenerator);

            // Set the output voltage and light brightness based on the generated intensity
            outputs[DREAMSCAPE_OUTPUT].setVoltage(dreamscapeIntensity);
            lights[DREAMSCAPE_LIGHT].setBrightness(dreamscapeIntensity);
        } else {
            // Reset the output and light when the trigger input is not active
            outputs[DREAMSCAPE_OUTPUT].setVoltage(0.0f);
            lights[DREAMSCAPE_LIGHT].setBrightness(0.0f);
        }
    }
};

struct MSMPanel : TransparentWidget {
  NVGcolor backgroundColor = componentlibrary::SCHEME_LIGHT_GRAY;
  float scalar = 1.0;
  std::string imagePath;
	void draw(const DrawArgs &args) override {
      std::shared_ptr<Image> backgroundImage = APP->window->loadImage(imagePath);
	  nvgBeginPath(args.vg);
	  nvgRect(args.vg, 0.0, 0.0, box.size.x, box.size.y);

	  // Background color
	  if (backgroundColor.a > 0) {
	    nvgFillColor(args.vg, backgroundColor);
	    nvgFill(args.vg);
	  }

	  // Background image
	  if (backgroundImage) {
	    int width, height;
	    nvgImageSize(args.vg, backgroundImage->handle, &width, &height);
	    NVGpaint paint = nvgImagePattern(args.vg, 0.0, 0.0, width/scalar, height/scalar, 0.0, backgroundImage->handle, 1.0);
	    nvgFillPaint(args.vg, paint);
	    nvgFill(args.vg);
	  }

	  // Border
	  NVGcolor borderColor = componentlibrary::SCHEME_LIGHT_GRAY; //nvgRGBAf(0.5, 0.5, 0.5, 0.5);
	  nvgBeginPath(args.vg);
	  nvgRect(args.vg, 0.5, 0.5, box.size.x - 1.0, box.size.y - 1.0);
	  nvgStrokeColor(args.vg, borderColor);
	  nvgStrokeWidth(args.vg, 1.0);
	  nvgStroke(args.vg);

	  Widget::draw(args);
	}
};


struct DreamscapeGeneratorWidget : ModuleWidget {
	MSMPanel *backdrop;

	DreamscapeGeneratorWidget(DreamscapeGenerator* module) {
		setModule(module);
		//setPanel(createPanel(asset::plugin(pluginInstance, "res/nrandomizer.svg")));

		backdrop = new MSMPanel();
		backdrop->box.size = Vec(6 * RACK_GRID_WIDTH, RACK_GRID_HEIGHT);
		backdrop->imagePath = asset::plugin(pluginInstance, "res/backdrop.png");
		backdrop->scalar = 3.5;
		backdrop->visible = true;
		
		setPanel(backdrop);

		addChild(createWidget<ScrewBlack>(Vec(15, 0)));
        addChild(createWidget<ScrewBlack>(Vec(box.size.x - 30, 0)));
        addChild(createWidget<ScrewBlack>(Vec(15, 365)));
        addChild(createWidget<ScrewBlack>(Vec(box.size.x - 30, 365)));

        //addParam(createParam<RoundKnob>(Vec(40, 60), module, DREAMSCAPE_PARAM));
        addInput(createInput<PJ301MPort>(Vec(10, 100), module, DREAMSCAPE_INPUT));
        addOutput(createOutput<PJ301MPort>(Vec(10, 140), module, DREAMSCAPE_OUTPUT));
        addChild(createLight<SmallLight<RedLight>>(Vec(45, 180), module, DREAMSCAPE_LIGHT));


		addParam(createParamCentered<RoundSmallBlackKnob>(mm2px(Vec(15.24, 45)), module, DREAMSCAPE_PARAM));
		/*addOutput(createOutputCentered<PJ301MPort>(mm2px(Vec(22.24, 113)), module, DreamscapeGenerator::DREAMSCAPE_OUTPUT));
		addInput(createInputCentered<PJ301MPort>(mm2px(Vec(8.24, 113)), module, DreamscapeGenerator::DREAMSCAPE_INPUT));*/

	}
};

Model* modelDreamscapeGenerator = createModel<DreamscapeGenerator, DreamscapeGeneratorWidget>("dreamscapegenerator");